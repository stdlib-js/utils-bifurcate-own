{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/return_values.js", "../lib/return_keys.js", "../lib/return_pairs.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar indexOf = require( '@stdlib/utils-index-of' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar returns = [ 'values', 'keys', '*' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.thisArg] - execution context\n* @param {string} [options.returns] - output format\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'returns': '*',\n*     'thisArg': {}\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'thisArg' ) ) {\n\t\topts.thisArg = options.thisArg;\n\t}\n\tif ( hasOwnProp( options, 'returns' ) ) {\n\t\topts.returns = options.returns;\n\t\tif ( indexOf( returns, opts.returns ) === -1 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'returns', returns.join( '\", \"' ), opts.returns ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Splits values into two groups according to a predicate function and outputs results as object values.\n*\n* ## Notes\n*\n* -   We need to cache the object value to prevent the edge case where, during the invocation of the predicate function, the value at key `k` is swapped for some other value. For some, that might be a feature; here, we take the stance that one should be less clever.\n*\n* @private\n* @param {(Object|Array|TypedArray)} obj - input object\n* @param {Options} opts - function options\n* @param {*} [opts.thisArg] - execution context\n* @param {Function} predicate - predicate function indicating which group an element in the input object belongs to\n* @returns {(Array<Array>|Array)} results\n*\n* @example\n* function predicate( v ) {\n*     return v[ 0 ] === 'b';\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'boop',\n*     'c': 'foo',\n*     'd': 'bar'\n* };\n* var out = bifurcateOwn( obj, {}, predicate );\n* // e.g., returns [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n*/\nfunction bifurcateOwn( obj, opts, predicate ) {\n\tvar thisArg;\n\tvar bool;\n\tvar out;\n\tvar key;\n\tvar flg;\n\tvar v;\n\n\tthisArg = opts.thisArg;\n\tout = [ [], [] ];\n\tflg = true;\n\tfor ( key in obj ) {\n\t\tif ( hasOwnProp( obj, key ) ) {\n\t\t\tflg = false;\n\t\t\tv = obj[ key ];\n\t\t\tbool = predicate.call( thisArg, v, key );\n\t\t\tif ( bool ) {\n\t\t\t\tout[ 0 ].push( v );\n\t\t\t} else {\n\t\t\t\tout[ 1 ].push( v );\n\t\t\t}\n\t\t}\n\t}\n\tif ( flg ) {\n\t\tout.length = 0;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = bifurcateOwn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Splits values into two groups according to a predicate function and outputs results as keys.\n*\n* @private\n* @param {(Object|Array|TypedArray)} obj - input object\n* @param {Options} opts - function options\n* @param {*} [opts.thisArg] - execution context\n* @param {Function} predicate - predicate function specifying which group an element in the input object belongs to\n* @returns {(Array<Array>|Array)} results\n*\n* @example\n* function predicate( v ) {\n*     return v[ 0 ] === 'b';\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'boop',\n*     'c': 'foo',\n*     'd': 'bar'\n* };\n* var out = bifurcateOwn( obj, {}, predicate );\n* // e.g., returns [ [ 'a', 'b', 'd' ], [ 'c' ] ]\n*/\nfunction bifurcateOwn( obj, opts, predicate ) {\n\tvar thisArg;\n\tvar bool;\n\tvar out;\n\tvar key;\n\tvar flg;\n\n\tthisArg = opts.thisArg;\n\tout = [ [], [] ];\n\tflg = true;\n\tfor ( key in obj ) {\n\t\tif ( hasOwnProp( obj, key ) ) {\n\t\t\tflg = false;\n\t\t\tbool = predicate.call( thisArg, obj[ key ], key );\n\t\t\tif ( bool ) {\n\t\t\t\tout[ 0 ].push( key );\n\t\t\t} else {\n\t\t\t\tout[ 1 ].push( key );\n\t\t\t}\n\t\t}\n\t}\n\tif ( flg ) {\n\t\tout.length = 0;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = bifurcateOwn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Splits values into two groups according to a predicate function and outputs results as key-value values.\n*\n* ## Notes\n*\n* -   We need to cache the object value to prevent the edge case where, during the invocation of the predicate function, the value at key `k` is swapped for some other value. For some, that might be a feature; here, we take the stance that one should be less clever.\n*\n* @private\n* @param {(Object|Array|TypedArray)} obj - input object\n* @param {Options} opts - function options\n* @param {*} [opts.thisArg] - execution context\n* @param {Function} predicate - predicate function indicating which group an element in the input object belongs to\n* @returns {(Array<Array>|Array)} results\n*\n* @example\n* function predicate( v ) {\n*     return v[ 0 ] === 'b';\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'boop',\n*     'c': 'foo',\n*     'd': 'bar'\n* };\n* var out = bifurcateOwn( obj, {}, predicate );\n* // e.g., returns [ [ [ 'a', 'beep' ], [ 'b', 'boop' ], [ 'd', 'bar' ] ], [ [ 'c', 'foo' ] ] ]\n*/\nfunction bifurcateOwn( obj, opts, predicate ) {\n\tvar thisArg;\n\tvar bool;\n\tvar out;\n\tvar key;\n\tvar flg;\n\tvar v;\n\n\tthisArg = opts.thisArg;\n\tout = [ [], [] ];\n\tflg = true;\n\tfor ( key in obj ) {\n\t\tif ( hasOwnProp( obj, key ) ) {\n\t\t\tflg = false;\n\t\t\tv = obj[ key ];\n\t\t\tbool = predicate.call( thisArg, v, key );\n\t\t\tif ( bool ) {\n\t\t\t\tout[ 0 ].push( [ key, v ] );\n\t\t\t} else {\n\t\t\t\tout[ 1 ].push( [ key, v ] );\n\t\t\t}\n\t\t}\n\t}\n\tif ( flg ) {\n\t\tout.length = 0;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = bifurcateOwn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObjectLike = require( '@stdlib/assert-is-object-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar returnValues = require( './return_values.js' );\nvar returnKeys = require( './return_keys.js' );\nvar returnPairs = require( './return_pairs.js' );\n\n\n// MAIN //\n\n/**\n* Splits an object's own property values into two groups according to a predicate function.\n*\n* @param {(Object|Array|TypedArray)} obj - input object\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {string} [options.returns=\"values\"] - if `values`, values are returned; if `keys`, keys are returned; if `*`, both keys and values are returned\n* @param {Function} predicate - predicate function indicating which group an element in the input object belongs to\n* @throws {TypeError} first argument must be an object, array, or typed array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} last argument must be a function\n* @throws {TypeError} must provide valid options\n* @returns {(Array<Array>|Array)} group results\n*\n* @example\n* function predicate( v ) {\n*     return v[ 0 ] === 'b';\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'boop',\n*     'c': 'foo',\n*     'd': 'bar'\n* };\n* var out = bifurcateOwn( obj, predicate );\n* // e.g., returns [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n*\n* @example\n* function predicate( v ) {\n*     return v[ 0 ] === 'b';\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'boop',\n*     'c': 'foo',\n*     'd': 'bar'\n* };\n* var opts = {\n*     'returns': 'keys'\n* };\n* var out = bifurcateOwn( obj, opts, predicate );\n* // e.g., returns [ [ 'a', 'b', 'd' ], [ 'c' ] ]\n*\n* @example\n* function predicate( v ) {\n*     return v[ 0 ] === 'b';\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'boop',\n*     'c': 'foo',\n*     'd': 'bar'\n* };\n* var opts = {\n*     'returns': '*'\n* };\n* var out = bifurcateOwn( obj, opts, predicate );\n* // e.g., returns [ [ [ 'a', 'beep' ], [ 'b', 'boop' ], [ 'd', 'bar' ] ], [ [ 'c', 'foo' ] ] ]\n*/\nfunction bifurcateOwn( obj, options, predicate ) {\n\tvar opts;\n\tvar err;\n\tvar cb;\n\tif ( !isObjectLike( obj ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', obj ) );\n\t}\n\topts = {\n\t\t'returns': 'values'\n\t};\n\tif ( arguments.length === 2 ) {\n\t\tcb = options;\n\t} else {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tcb = predicate;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', cb ) );\n\t}\n\tif ( opts.returns === 'values' ) {\n\t\treturn returnValues( obj, opts, cb );\n\t}\n\tif ( opts.returns === 'keys' ) {\n\t\treturn returnKeys( obj, opts, cb );\n\t}\n\treturn returnPairs( obj, opts, cb );\n}\n\n\n// EXPORTS //\n\nmodule.exports = bifurcateOwn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split an object's own property values into two groups according to a predicate function.\n*\n* @module @stdlib/utils-bifurcate-own\n*\n* @example\n* var bifurcateOwn = require( '@stdlib/utils-bifurcate-own' );\n*\n* function predicate( v ) {\n*     return v[ 0 ] === 'b';\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'boop',\n*     'c': 'foo',\n*     'd': 'bar'\n* };\n*\n* var out = bifurcateOwn( obj, predicate );\n* // e.g., returns [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n*\n* @example\n* var bifurcateOwn = require( '@stdlib/utils-bifurcate-own' );\n*\n* function predicate( v ) {\n*     return v[ 0 ] === 'b';\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'boop',\n*     'c': 'foo',\n*     'd': 'bar'\n* };\n*\n* var opts = {\n*     'returns': 'keys'\n* };\n* var out = bifurcateOwn( obj, opts, predicate );\n* // e.g., returns [ [ 'a', 'b', 'd' ], [ 'c' ] ]\n*\n* @example\n* var bifurcateOwn = require( '@stdlib/utils-bifurcate-own' );\n*\n* function predicate( v ) {\n*     return v[ 0 ] === 'b';\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'boop',\n*     'c': 'foo',\n*     'd': 'bar'\n* };\n* var opts = {\n*     'returns': '*'\n* };\n* var out = bifurcateOwn( obj, opts, predicate );\n* // e.g., returns [ [ [ 'a', 'beep' ], [ 'b', 'boop' ], [ 'd', 'bar' ] ], [ [ 'c', 'foo' ] ] ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "indexOf", "format", "returns", "validate", "opts", "options", "require_return_values", "__commonJSMin", "exports", "module", "hasOwnProp", "bifurcateOwn", "obj", "opts", "predicate", "thisArg", "bool", "out", "key", "flg", "v", "require_return_keys", "__commonJSMin", "exports", "module", "hasOwnProp", "bifurcateOwn", "obj", "opts", "predicate", "thisArg", "bool", "out", "key", "flg", "require_return_pairs", "__commonJSMin", "exports", "module", "hasOwnProp", "bifurcateOwn", "obj", "opts", "predicate", "thisArg", "bool", "out", "key", "flg", "v", "require_main", "__commonJSMin", "exports", "module", "isObjectLike", "isFunction", "format", "validate", "returnValues", "returnKeys", "returnPairs", "bifurcateOwn", "obj", "options", "predicate", "opts", "err", "cb", "main"]
}
